{"version":3,"sources":["webpack:///./src/components/bad/dropdown.js","webpack:///./src/pages/dropdown.jsx","webpack:///./node_modules/focus-visible/dist/focus-visible.js","webpack:///./src/components/site-chrome/header.js","webpack:///./src/components/site-chrome/navigation.js","webpack:///./src/components/site-chrome/layout.js"],"names":["dropdown","_ref","activatorText","_ref$items","items","_useState","useState","activated","setActivated","activatorRef","useRef","listRef","handleClickOutside","event","target","useEffect","document","Object","core_browser_esm","className","dropdownStyles","wrap","ref","activator","onClick","id","uuid","v4","itemList","map","item","index","key","href","url","DropdownPage","layout","seo","title","keywords","aria-label","text","better_dropdown","applyFocusVisiblePolyfill","scope","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","search","tel","email","password","number","date","month","week","time","datetime","datetime-local","isValidFocusTarget","el","nodeName","classList","addFocusVisibleClass","contains","add","setAttribute","onPointerDown","e","addInitialPointerMoveListeners","addEventListener","onInitialPointerMove","toLowerCase","removeEventListener","metaKey","altKey","ctrlKey","activeElement","visibilityState","type","tagName","readOnly","isContentEditable","hasAttribute","window","clearTimeout","setTimeout","remove","removeAttribute","nodeType","Node","DOCUMENT_FRAGMENT_NODE","host","DOCUMENT_NODE","documentElement","CustomEvent","error","createEvent","initCustomEvent","dispatchEvent","factory","Header","siteTitle","gatsby_browser_entry","to","header","navigation","navStyles","nav","navItemGroup","navHeading","__webpack_exports__","children","data","_856328897","tabIndex"],"mappings":"yKA0DAA,EArDiB,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,cAAgCC,EAAAF,EAAjBG,aAAiB,IAAAD,EAAT,GAASA,EAAAE,EACdC,oBADc,GACzCC,EADyCF,EAAA,GAC9BG,EAD8BH,EAAA,GAE1CI,EAAeC,mBACfC,EAAUD,mBAKVE,EAAqB,SAAAC,GACnBF,mBAAyBE,EAAzBF,SAA0CF,mBAA8BI,EAA5EC,SAGAN,OAaJ,OAXAO,oBAAU,WAON,OANAR,EACES,yCAEAA,4CAGK,WACLA,8CAED,CAVLD,IAYIE,OAAAC,EAAA,EAAAD,CAAA,OACIE,UAAWC,IAAeC,MAE1BJ,OAAAC,EAAA,EAAAD,CAAA,QACIK,IADJb,EAEIU,UAAWC,IAFfG,UAGIC,QA3BQ,WAChBhB,QA4BUN,EARV,IAUIe,OAAAC,EAAA,EAAAD,CAAA,OACIK,IADJX,EAEIc,GAAE,OAASC,IAFfC,KAGIR,UACI,YAAYC,IAAZQ,SAAA,KACCrB,EAAYa,IAAHb,UADV,OAIHH,EAAAyB,IAAU,SAAAC,EAAAC,GACP,OAAOd,OAAAC,EAAA,EAAAD,CAAA,OAAKe,IAAKD,GACbd,OAAAC,EAAA,EAAAD,CAAA,KAAGgB,KAAMH,EAAKI,KADlB,4BCFLC,UAxCM,kBACnBlB,OAAAC,EAAA,EAAAD,CAACmB,EAAA,EAAD,KACEnB,OAAAC,EAAA,EAAAD,CAACoB,EAAA,EAAD,CAAKC,MAAM,WAAWC,SAAU,CAAC,aAAc,gBAAiB,WAChEtB,OAAAC,EAAA,EAAAD,CAAA,WACEA,OAAAC,EAAA,EAAAD,CAAA,uBACAA,OAAAC,EAAA,EAAAD,CAAA,mIACAA,OAAAC,EAAA,EAAAD,CAAA,wGAA+FA,OAAAC,EAAA,EAAAD,CAAA,WAA/F,qEAEAA,OAAAC,EAAA,EAAAD,CAAA,WAASE,UAAU,WACjBF,OAAAC,EAAA,EAAAD,CAAA,WACEA,OAAAC,EAAA,EAAAD,CAAA,qCAA4BA,OAAAC,EAAA,EAAAD,CAAA,KAAGgB,KAAK,6FAA6FO,aAAW,4BAAhH,UAA5B,KACAvB,OAAAC,EAAA,EAAAD,CAACjB,EAAD,CAAaE,cAAc,QAAQE,MAAO,CAAC,CACzCqC,KAAM,WACNP,IAAK,KACL,CACAO,KAAM,WACNP,IAAK,KACL,CACAO,KAAM,UACNP,IAAK,SAGTjB,OAAAC,EAAA,EAAAD,CAAA,WACEA,OAAAC,EAAA,EAAAD,CAAA,wCAA+BA,OAAAC,EAAA,EAAAD,CAAA,KAAGgB,KAAK,gGAAgGO,aAAW,4BAAnH,UAA/B,KACAvB,OAAAC,EAAA,EAAAD,CAACyB,EAAA,EAAD,CAAgBxC,cAAc,QAAQE,MAAO,CAAC,CAC5CqC,KAAM,WACNP,IAAK,KACL,CACAO,KAAM,WACNP,IAAK,KACL,CACAO,KAAM,UACNP,IAAK,8ICtChB,WACD,aASA,SAAAS,EAAAC,GACA,IAAAC,GAAA,EACAC,GAAA,EACAC,EAAA,KACAC,EAAA,CACAP,MAAA,EACAQ,QAAA,EACAf,KAAA,EACAgB,KAAA,EACAC,OAAA,EACAC,UAAA,EACAC,QAAA,EACAC,MAAA,EACAC,OAAA,EACAC,MAAA,EACAC,MAAA,EACAC,UAAA,EACAC,kBAAA,GAQA,SAAAC,EAAAC,GACA,SAAAA,OAAA7C,UAAA,SAAA6C,EAAAC,UAAA,SAAAD,EAAAC,UAAA,cAAAD,GAAA,aAAAA,EAAAE,WAwCA,SAAAC,EAAAH,GACAA,EAAAE,UAAAE,SAAA,mBAIAJ,EAAAE,UAAAG,IAAA,iBACAL,EAAAM,aAAA,gCAgDA,SAAAC,EAAAC,GACAxB,GAAA,EA0EA,SAAAyB,IACAtD,SAAAuD,iBAAA,YAAAC,GACAxD,SAAAuD,iBAAA,YAAAC,GACAxD,SAAAuD,iBAAA,UAAAC,GACAxD,SAAAuD,iBAAA,cAAAC,GACAxD,SAAAuD,iBAAA,cAAAC,GACAxD,SAAAuD,iBAAA,YAAAC,GACAxD,SAAAuD,iBAAA,YAAAC,GACAxD,SAAAuD,iBAAA,aAAAC,GACAxD,SAAAuD,iBAAA,WAAAC,GAuBA,SAAAA,EAAAH,GAGAA,EAAAvD,OAAAgD,UAAA,SAAAO,EAAAvD,OAAAgD,SAAAW,gBAIA5B,GAAA,EA1BA7B,SAAA0D,oBAAA,YAAAF,GACAxD,SAAA0D,oBAAA,YAAAF,GACAxD,SAAA0D,oBAAA,UAAAF,GACAxD,SAAA0D,oBAAA,cAAAF,GACAxD,SAAA0D,oBAAA,cAAAF,GACAxD,SAAA0D,oBAAA,YAAAF,GACAxD,SAAA0D,oBAAA,YAAAF,GACAxD,SAAA0D,oBAAA,aAAAF,GACAxD,SAAA0D,oBAAA,WAAAF,IAyBAxD,SAAAuD,iBAAA,UA9IA,SAAAF,GACAA,EAAAM,SAAAN,EAAAO,QAAAP,EAAAQ,UAIAjB,EAAAhB,EAAAkC,gBACAd,EAAApB,EAAAkC,eAGAjC,GAAA,KAqIA,GACA7B,SAAAuD,iBAAA,YAAAH,GAAA,GACApD,SAAAuD,iBAAA,cAAAH,GAAA,GACApD,SAAAuD,iBAAA,aAAAH,GAAA,GACApD,SAAAuD,iBAAA,mBAvEA,SAAAF,GACA,UAAArD,SAAA+D,kBAKAjC,IACAD,GAAA,GAGAyB,OA6DA,GACAA,IAKA1B,EAAA2B,iBAAA,QAvHA,SAAAF,GA3FA,IAAAR,EACAmB,EACAC,EA2FArB,EAAAS,EAAAvD,WAIA+B,IAjGAgB,EAiGAQ,EAAAvD,OAhGAkE,EAAAnB,EAAAmB,KAGA,UAFAC,EAAApB,EAAAoB,UAEAjC,EAAAgC,KAAAnB,EAAAqB,UAIA,YAAAD,IAAApB,EAAAqB,UAIArB,EAAAsB,qBAsFAnB,EAAAK,EAAAvD,WAgHA,GACA8B,EAAA2B,iBAAA,OAxGA,SAAAF,GAnEA,IAAAR,EAoEAD,EAAAS,EAAAvD,WAIAuD,EAAAvD,OAAAiD,UAAAE,SAAA,kBAAAI,EAAAvD,OAAAsE,aAAA,+BAKAtC,GAAA,EACAuC,OAAAC,aAAAvC,GACAA,EAAAsC,OAAAE,WAAA,WACAzC,GAAA,EACAuC,OAAAC,aAAAvC,IACS,MAlFTc,EAmFAQ,EAAAvD,QAlFAsE,aAAA,8BAIAvB,EAAAE,UAAAyB,OAAA,iBACA3B,EAAA4B,gBAAA,iCAqKA,GAMA7C,EAAA8C,WAAAC,KAAAC,wBAAAhD,EAAAiD,KAIAjD,EAAAiD,KAAA1B,aAAA,4BACKvB,EAAA8C,WAAAC,KAAAG,eACL9E,SAAA+E,gBAAAhC,UAAAG,IAAA,oBAOA,uBAAAmB,QAAA,oBAAArE,SAAA,CAOA,IAAAH,EAHAwE,OAAA1C,4BAKA,IACA9B,EAAA,IAAAmF,YAAA,gCACK,MAAAC,IAELpF,EAAAG,SAAAkF,YAAA,gBACAC,gBAAA,yCAGAd,OAAAe,cAAAvF,GAGA,oBAAAG,UAGA2B,EAAA3B,UAjT8DqF,wECGxDC,EAAS,SAAArG,GAAA,IAAGsG,EAAHtG,EAAAsG,UAAA,OACbtF,OAAAC,EAAA,EAAAD,CAAA,UAAQE,UAAU,gBAChBF,OAAAC,EAAA,EAAAD,CAAA,MAAIE,UAAU,aACZF,OAAAC,EAAA,EAAAD,CAAA,UAAIA,OAAAC,EAAA,EAAAD,CAAA,KAAGgB,KAAK,SAFhB,kBAIEhB,OAAAC,EAAA,EAAAD,CAAA,UACEA,OAAAC,EAAA,EAAAD,CAAAuF,EAAA,MACEC,GAAG,KAPIF,MAmBfD,eAAsB,CACpBC,UAAW,IAGb,IAAAG,EAAA,oBCcAC,EApCmB,kBACf1F,OAAAC,EAAA,EAAAD,CAAA,OAAKE,UAAS,OAASyF,IAAUC,KAC7B5F,OAAAC,EAAA,EAAAD,CAAA,MAAIE,UAAU,mBADlB,cAIIF,OAAAC,EAAA,EAAAD,CAAA,UACIA,OAAAC,EAAA,EAAAD,CAAA,UAAIA,OAAAC,EAAA,EAAAD,CAAAuF,EAAA,MAAMC,GAAG,KADjB,aAEIxF,OAAAC,EAAA,EAAAD,CAAA,UAAIA,OAAAC,EAAA,EAAAD,CAAAuF,EAAA,MAAMC,GAAG,WAFjB,eAGIxF,OAAAC,EAAA,EAAAD,CAAA,MAAIE,UAAS,gBAAkByF,IAAlBE,aAAA,KACT7F,OAAAC,EAAA,EAAAD,CAAA,MAAIE,UAAS,cAAgByF,IAAUG,YAD3C,SAII9F,OAAAC,EAAA,EAAAD,CAAA,UACIA,OAAAC,EAAA,EAAAD,CAAA,UAAIA,OAAAC,EAAA,EAAAD,CAAAuF,EAAA,MAAMC,GAAG,aADjB,aAEIxF,OAAAC,EAAA,EAAAD,CAAA,UAAIA,OAAAC,EAAA,EAAAD,CAAAuF,EAAA,MAAMC,GAAG,eAFjB,eAGIxF,OAAAC,EAAA,EAAAD,CAAA,UAAIA,OAAAC,EAAA,EAAAD,CAAAuF,EAAA,MAAMC,GAAG,WAHjB,WAIIxF,OAAAC,EAAA,EAAAD,CAAA,UAAIA,OAAAC,EAAA,EAAAD,CAAAuF,EAAA,MAAMC,GAAG,cAJjB,cAKIxF,OAAAC,EAAA,EAAAD,CAAA,UAAIA,OAAAC,EAAA,EAAAD,CAAAuF,EAAA,MAAMC,GAAG,qBAZzB,uBAeIxF,OAAAC,EAAA,EAAAD,CAAA,MAAIE,UAAS,gBAAkByF,IAAlBE,aAAA,KACT7F,OAAAC,EAAA,EAAAD,CAAA,MAAIE,UAAS,cAAgByF,IAAUG,YAD3C,YAII9F,OAAAC,EAAA,EAAAD,CAAA,UACIA,OAAAC,EAAA,EAAAD,CAAA,UADJ,oBAEIA,OAAAC,EAAA,EAAAD,CAAA,UAFJ,iBAGIA,OAAAC,EAAA,EAAAD,CAAA,UAHJ,iBAIIA,OAAAC,EAAA,EAAAD,CAAA,UAJJ,sBAKIA,OAAAC,EAAA,EAAAD,CAAA,UA7BD,8CC6BnB+F,EAAA,EAzBe,SAAA/G,GAAkB,IAAfgH,EAAehH,EAAfgH,SACVC,EAAIC,EAAVD,KASA,OACEjG,OAAAC,EAAA,EAAAD,CAAA,OAAKE,UAAU,mBACbF,OAAAC,EAAA,EAAAD,CAAAyF,EAAA,CAAQH,UAAWW,oBAAuB5E,QAC1CrB,OAAAC,EAAA,EAAAD,CAAA0F,EAFF,MAGE1F,OAAAC,EAAA,EAAAD,CAAA,QAAME,UAAN,MAAsBM,GAAtB,OAAgC2F,SAAS,MAJ7CH","file":"component---src-pages-dropdown-jsx-c85ab124b3e875b06c8e.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\"\nimport uuid from \"uuid\"\n\nimport dropdownStyles from \"./dropdown.module.scss\"\n\nconst Dropdown = ({ activatorText, items = [] }) => {\n    const [activated, setActivated] = useState(false)\n    const activatorRef = useRef()\n    const listRef = useRef()\n\n    const handleClick = () => {\n        setActivated(!activated)\n    }\n    const handleClickOutside = (event) => {\n        if (listRef.current.contains(event.target) || activatorRef.current.contains(event.target)) {\n            return\n        }\n        setActivated(false)\n    }\n    useEffect(() => {\n        if (activated) {\n          document.addEventListener(\"mousedown\", handleClickOutside)\n        } else {\n          document.removeEventListener(\"mousedown\", handleClickOutside)\n        }\n    \n        return () => {\n          document.removeEventListener(\"mousedown\", handleClickOutside)\n        }\n      }, [activated])\n    return (\n        <div\n            className={dropdownStyles.wrap}\n        >\n            <span\n                ref={activatorRef}\n                className={dropdownStyles.activator}\n                onClick={handleClick}\n            >\n                { activatorText + '' }\n            </span>\n            <div\n                ref={listRef}\n                id={`list${uuid.v4()}`}\n                className={\n                    `itemList ${dropdownStyles.itemList} ` +\n                    (activated ? dropdownStyles.activated : null)\n                }\n            >\n                {items.map((item, index) => {\n                    return <div key={index}>\n                        <a href={item.url}>item.text</a>\n                    </div>\n                })}\n            </div>\n        </div>\n    )\n}\nexport default Dropdown\n","import React from \"react\"\n\nimport Layout from '../components/site-chrome/layout'\nimport SEO from '../components/site-chrome/seo'\n\nimport BadDropdown from '../components/bad/dropdown'\nimport BetterDropdown from '../components/better/dropdown'\n\nconst DropdownPage = () => (\n  <Layout>\n    <SEO title=\"Dropdown\" keywords={['javascript', 'accessibility', 'react']} />\n    <div>\n      <h2>Dropdowns</h2>\n      <p>Tuck controls into an expandible, collapsible, accessible menu. Consider, however, whether you really need a dropdown.</p>\n      <p>Keyboard interactions will depend on what's in the menu. List of links? The TAB key is fine.<br />UI actions with a button or radio buttons? Script the arrow keys.</p>\n\n      <section className=\"two-col\">\n        <div>\n          <h3>Bad link list dropdown [<a href=\"https://github.com/marcysutton/js-a11y-workshop/blob/master/src/components/bad/dropdown.js\" aria-label=\"inaccessible demo source\">source</a>]</h3>\n          <BadDropdown activatorText=\"About\" items={[{\n            text: 'Overview',\n            url: '#'\n          },{\n            text: 'Our team',\n            url: '#'\n          },{\n            text: 'Careers',\n            url: '#'\n          }]} />\n        </div>\n        <div>\n          <h3>Better link list dropdown [<a href=\"https://github.com/marcysutton/js-a11y-workshop/blob/master/src/components/better/dropdown.js\" aria-label=\"inaccessible demo source\">source</a>]</h3>\n          <BetterDropdown activatorText=\"About\" items={[{\n            text: 'Overview',\n            url: '#'\n          },{\n            text: 'Our team',\n            url: '#'\n          },{\n            text: 'Careers',\n            url: '#'\n          }]} />\n        </div>\n      </section>\n    </div>\n  </Layout>\n)\n\nexport default DropdownPage\n\n\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() : typeof define === 'function' && define.amd ? define(factory) : factory();\n})(this, function () {\n  'use strict';\n  /**\n   * Applies the :focus-visible polyfill at the given scope.\n   * A scope in this case is either the top-level Document or a Shadow Root.\n   *\n   * @param {(Document|ShadowRoot)} scope\n   * @see https://github.com/WICG/focus-visible\n   */\n\n  function applyFocusVisiblePolyfill(scope) {\n    var hadKeyboardEvent = true;\n    var hadFocusVisibleRecently = false;\n    var hadFocusVisibleRecentlyTimeout = null;\n    var inputTypesWhitelist = {\n      text: true,\n      search: true,\n      url: true,\n      tel: true,\n      email: true,\n      password: true,\n      number: true,\n      date: true,\n      month: true,\n      week: true,\n      time: true,\n      datetime: true,\n      'datetime-local': true\n    };\n    /**\n     * Helper function for legacy browsers and iframes which sometimes focus\n     * elements like document, body, and non-interactive SVG.\n     * @param {Element} el\n     */\n\n    function isValidFocusTarget(el) {\n      if (el && el !== document && el.nodeName !== 'HTML' && el.nodeName !== 'BODY' && 'classList' in el && 'contains' in el.classList) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Computes whether the given element should automatically trigger the\n     * `focus-visible` class being added, i.e. whether it should always match\n     * `:focus-visible` when focused.\n     * @param {Element} el\n     * @return {boolean}\n     */\n\n\n    function focusTriggersKeyboardModality(el) {\n      var type = el.type;\n      var tagName = el.tagName;\n\n      if (tagName == 'INPUT' && inputTypesWhitelist[type] && !el.readOnly) {\n        return true;\n      }\n\n      if (tagName == 'TEXTAREA' && !el.readOnly) {\n        return true;\n      }\n\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Add the `focus-visible` class to the given element if it was not added by\n     * the author.\n     * @param {Element} el\n     */\n\n\n    function addFocusVisibleClass(el) {\n      if (el.classList.contains('focus-visible')) {\n        return;\n      }\n\n      el.classList.add('focus-visible');\n      el.setAttribute('data-focus-visible-added', '');\n    }\n    /**\n     * Remove the `focus-visible` class from the given element if it was not\n     * originally added by the author.\n     * @param {Element} el\n     */\n\n\n    function removeFocusVisibleClass(el) {\n      if (!el.hasAttribute('data-focus-visible-added')) {\n        return;\n      }\n\n      el.classList.remove('focus-visible');\n      el.removeAttribute('data-focus-visible-added');\n    }\n    /**\n     * If the most recent user interaction was via the keyboard;\n     * and the key press did not include a meta, alt/option, or control key;\n     * then the modality is keyboard. Otherwise, the modality is not keyboard.\n     * Apply `focus-visible` to any current active element and keep track\n     * of our keyboard modality state with `hadKeyboardEvent`.\n     * @param {KeyboardEvent} e\n     */\n\n\n    function onKeyDown(e) {\n      if (e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n\n      if (isValidFocusTarget(scope.activeElement)) {\n        addFocusVisibleClass(scope.activeElement);\n      }\n\n      hadKeyboardEvent = true;\n    }\n    /**\n     * If at any point a user clicks with a pointing device, ensure that we change\n     * the modality away from keyboard.\n     * This avoids the situation where a user presses a key on an already focused\n     * element, and then clicks on a different element, focusing it with a\n     * pointing device, while we still think we're in keyboard modality.\n     * @param {Event} e\n     */\n\n\n    function onPointerDown(e) {\n      hadKeyboardEvent = false;\n    }\n    /**\n     * On `focus`, add the `focus-visible` class to the target if:\n     * - the target received focus as a result of keyboard navigation, or\n     * - the event target is an element that will likely require interaction\n     *   via the keyboard (e.g. a text box)\n     * @param {Event} e\n     */\n\n\n    function onFocus(e) {\n      // Prevent IE from focusing the document or HTML element.\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n        addFocusVisibleClass(e.target);\n      }\n    }\n    /**\n     * On `blur`, remove the `focus-visible` class from the target.\n     * @param {Event} e\n     */\n\n\n    function onBlur(e) {\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (e.target.classList.contains('focus-visible') || e.target.hasAttribute('data-focus-visible-added')) {\n        // To detect a tab/window switch, we look for a blur event followed\n        // rapidly by a visibility change.\n        // If we don't see a visibility change within 100ms, it's probably a\n        // regular focus change.\n        hadFocusVisibleRecently = true;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n          hadFocusVisibleRecently = false;\n          window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        }, 100);\n        removeFocusVisibleClass(e.target);\n      }\n    }\n    /**\n     * If the user changes tabs, keep track of whether or not the previously\n     * focused element had .focus-visible.\n     * @param {Event} e\n     */\n\n\n    function onVisibilityChange(e) {\n      if (document.visibilityState == 'hidden') {\n        // If the tab becomes active again, the browser will handle calling focus\n        // on the element (Safari actually calls it twice).\n        // If this tab change caused a blur on an element with focus-visible,\n        // re-apply the class when the user switches back to the tab.\n        if (hadFocusVisibleRecently) {\n          hadKeyboardEvent = true;\n        }\n\n        addInitialPointerMoveListeners();\n      }\n    }\n    /**\n     * Add a group of listeners to detect usage of any pointing devices.\n     * These listeners will be added when the polyfill first loads, and anytime\n     * the window is blurred, so that they are active when the window regains\n     * focus.\n     */\n\n\n    function addInitialPointerMoveListeners() {\n      document.addEventListener('mousemove', onInitialPointerMove);\n      document.addEventListener('mousedown', onInitialPointerMove);\n      document.addEventListener('mouseup', onInitialPointerMove);\n      document.addEventListener('pointermove', onInitialPointerMove);\n      document.addEventListener('pointerdown', onInitialPointerMove);\n      document.addEventListener('pointerup', onInitialPointerMove);\n      document.addEventListener('touchmove', onInitialPointerMove);\n      document.addEventListener('touchstart', onInitialPointerMove);\n      document.addEventListener('touchend', onInitialPointerMove);\n    }\n\n    function removeInitialPointerMoveListeners() {\n      document.removeEventListener('mousemove', onInitialPointerMove);\n      document.removeEventListener('mousedown', onInitialPointerMove);\n      document.removeEventListener('mouseup', onInitialPointerMove);\n      document.removeEventListener('pointermove', onInitialPointerMove);\n      document.removeEventListener('pointerdown', onInitialPointerMove);\n      document.removeEventListener('pointerup', onInitialPointerMove);\n      document.removeEventListener('touchmove', onInitialPointerMove);\n      document.removeEventListener('touchstart', onInitialPointerMove);\n      document.removeEventListener('touchend', onInitialPointerMove);\n    }\n    /**\n     * When the polfyill first loads, assume the user is in keyboard modality.\n     * If any event is received from a pointing device (e.g. mouse, pointer,\n     * touch), turn off keyboard modality.\n     * This accounts for situations where focus enters the page from the URL bar.\n     * @param {Event} e\n     */\n\n\n    function onInitialPointerMove(e) {\n      // Work around a Safari quirk that fires a mousemove on <html> whenever the\n      // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n      if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {\n        return;\n      }\n\n      hadKeyboardEvent = false;\n      removeInitialPointerMoveListeners();\n    } // For some kinds of state, we are interested in changes at the global scope\n    // only. For example, global pointer input, global key presses and global\n    // visibility change should affect the state at every scope:\n\n\n    document.addEventListener('keydown', onKeyDown, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', onVisibilityChange, true);\n    addInitialPointerMoveListeners(); // For focus and blur, we specifically care about state changes in the local\n    // scope. This is because focus / blur events that originate from within a\n    // shadow root are not re-dispatched from the host element if it was already\n    // the active element in its own scope:\n\n    scope.addEventListener('focus', onFocus, true);\n    scope.addEventListener('blur', onBlur, true); // We detect that a node is a ShadowRoot by ensuring that it is a\n    // DocumentFragment and also has a host property. This check covers native\n    // implementation and polyfill implementation transparently. If we only cared\n    // about the native implementation, we could just check if the scope was\n    // an instance of a ShadowRoot.\n\n    if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {\n      // Since a ShadowRoot is a special kind of DocumentFragment, it does not\n      // have a root element to add a class to. So, we add this attribute to the\n      // host element instead:\n      scope.host.setAttribute('data-js-focus-visible', '');\n    } else if (scope.nodeType === Node.DOCUMENT_NODE) {\n      document.documentElement.classList.add('js-focus-visible');\n    }\n  } // It is important to wrap all references to global window and document in\n  // these checks to support server-side rendering use cases\n  // @see https://github.com/WICG/focus-visible/issues/199\n\n\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    // Make the polyfill helper globally available. This can be used as a signal\n    // to interested libraries that wish to coordinate with the polyfill for e.g.,\n    // applying the polyfill to a shadow root:\n    window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill; // Notify interested libraries of the polyfill's presence, in case the\n    // polyfill was loaded lazily:\n\n    var event;\n\n    try {\n      event = new CustomEvent('focus-visible-polyfill-ready');\n    } catch (error) {\n      // IE11 does not support using CustomEvent as a constructor directly:\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});\n    }\n\n    window.dispatchEvent(event);\n  }\n\n  if (typeof document !== 'undefined') {\n    // Apply the polyfill to the global document, so that no JavaScript\n    // coordination is required to use the polyfill in the top-level document:\n    applyFocusVisiblePolyfill(document);\n  }\n});","import { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Header = ({ siteTitle }) => (\n  <header className=\"globalHeader\">\n    <ul className=\"skip-link\">\n      <li><a href=\"#main\">Skip to main</a></li>\n    </ul>\n    <h1>\n      <Link\n        to=\"/\"\n      >\n        {siteTitle}\n      </Link>\n    </h1>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: '',\n}\n\nexport default Header\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport navStyles from \"./navigation.module.scss\"\n\nconst Navigation = () => (\n    <nav className={`nav ${navStyles.nav}`}>\n        <h2 className=\"visually-hidden\">\n            Navigation\n        </h2>\n        <ul>\n            <li><Link to=\"/\">App Home</Link></li>\n            <li><Link to=\"/slides\">Slide deck</Link></li>\n            <li className={`navItemGroup ${navStyles.navItemGroup} `}>\n                <h3 className={`navHeading ${navStyles.navHeading}`}>\n                    Demos\n                </h3>\n                <ul>\n                    <li><Link to=\"/dropdown\">Dropdown</Link></li>\n                    <li><Link to=\"/async-form\">Async Form</Link></li>\n                    <li><Link to=\"/layout\">Layout</Link></li>\n                    <li><Link to=\"/animation\">Animation</Link></li>\n                    <li><Link to=\"/enhanced-tablist\">Enhanced Tablist</Link></li>\n                </ul>\n            </li>\n            <li className={`navItemGroup ${navStyles.navItemGroup} `}>\n                <h3 className={`navHeading ${navStyles.navHeading}`}>\n                    Concepts\n                </h3>\n                <ul>\n                    <li>Focus management</li>\n                    <li>Announcements</li>\n                    <li>Semantic HTML</li>\n                    <li>Unobtrusive motion</li>\n                    <li>Progressive enhancement</li>\n                </ul>\n            </li>\n        </ul>\n    </nav>\n)\n\nexport default Navigation\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport Navigation from './navigation'\nimport './layout.scss'\nimport 'focus-visible'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n  return (\n    <div className=\"js-workshop-app\">\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <Navigation />\n      <main className=\"app\" id=\"main\" tabIndex=\"-1\">\n        {children}\n      </main>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}